---
# Tasks for testing role

- name: Configure vagrant sandbox environment
  hosts: localhost
  roles:
    - role: amtega.vagrant_presets
      vagrant_presets_boxes_json_query: >-
        [? starts_with(name, `centos-7`)
           || starts_with(name, `fedora-29`)
           || starts_with(name, `fedora-30`) ]
    - role: amtega.vagrant_sandbox
      vagrant_sandbox_state: started
      vagrant_sandbox_idempotence_test: false
  tags:
    - sandbox

- name: Setup software and config requirements in sandbox hosts
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.epel
      when: ansible_facts.distribution | lower in ["centos", "redhat"]

    - role: amtega.rpmfusion
      when: ansible_facts.distribution | lower in ["fedora"]

    - role: amtega.docker_engine
      docker_engine_registry_state: absent

    - role: amtega.docker_presets
  tasks:
    - name: Install required packages
      package:
        name: "{{ item }}"
        state: present
      loop:
        - python-pip
        - sshpass

    - name: Install ansible
      pip:
        name: ansible
        state: latest

    - name: Create ansible softlink
      file:
        src: /usr/local/bin/ansible-playbook
        dest: /usr/bin/ansible-playbook
        state: link
      when: ansible_facts.distribution | lower == "debian"

    - name: Copy playbook to test idempotence
      copy:
        src: idempotence.yml
        dest: /tmp/idempotence.yml

    - name: Generate docker random images presets
      set_fact:
        docker_sandbox_images_random:
          - "{{ docker_presets_images | random }}"

    - name: Generate docker random containers presets
      set_fact:
        docker_sandbox_containers_random: >-
          {{ docker_presets_containers
             | selectattr("image",
                          "equalto",
                          docker_sandbox_images_random[0].name)
             | list }}

    - name: Setup sandbox config for explicit inventory file test 1
      set_fact:
        images_inventory_1: "{{ docker_sandbox_images_random }}"
        containers_inventory_1: >-
          {{ docker_sandbox_containers_random
             | docker_presets_randomize_names }}

    - name: Setup sandbox config for explicit inventory file test 2
      set_fact:
        images_inventory_2: "{{ docker_sandbox_images_random }}"
        containers_inventory_2: >-
          {{ docker_sandbox_containers_random
             | docker_presets_randomize_names }}

    - name: Setup sandbox config for automatic inventory file tests 1
      set_fact:
        images_inventory_3: "{{ docker_sandbox_images_random }}"
        containers_inventory_3: >
          {{ docker_sandbox_containers_random
             | docker_presets_randomize_names }}

    - name: Setup sandbox config for automatic inventory file tests 2
      set_fact:
        images_inventory_4: "{{ docker_sandbox_images_random }}"
        containers_inventory_4: >
          {{ docker_sandbox_containers_random
             | docker_presets_randomize_names }}

    - name: Setup sandbox config for automatic inventory file tests 3
      set_fact:
        images_inventory_5: "{{ docker_sandbox_images_random }}"
        containers_inventory_5: >
          {{ docker_sandbox_containers_random
             | docker_presets_randomize_names }}

    - name: Setup sandbox config for automatic inventory file tests 4
      set_fact:
        images_inventory_6: "{{ docker_sandbox_images_random }}"
        containers_inventory_6: >
          {{ docker_sandbox_containers_random
             | docker_presets_randomize_names }}

    - name: Setup idempotence test command
      set_fact:
        idempotence_tester_command: ansible-playbook

- name: Test disabling idempotence check
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.docker_sandbox
      docker_provisioner_containers_provisioning_method: sequential
      docker_sandbox_images: "{{ images_inventory_1 }}"
      docker_sandbox_containers: "{{ containers_inventory_1 }}"
      docker_sandbox_state: started
      docker_sandbox_inventory: "./docker_sandbox_inventory"
      docker_sandbox_group: docker_sandbox_containers_disable_idempotence
      docker_sandbox_idempotence_test: false
      docker_sandbox_cleanup_by_ppid: true
      docker_sandbox_cleanup_by_user: true
      docker_sandbox_cleanup_by_playbook: true
      docker_sandbox_cleanup_by_inventory: true

- name: Test cleanup by inventory file
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.docker_sandbox
      docker_provisioner_containers_provisioning_method: sequential
      docker_sandbox_images: "{{ images_inventory_2 }}"
      docker_sandbox_containers: "{{ containers_inventory_2 }}"
      docker_sandbox_state: started
      docker_sandbox_inventory: "./docker_sandbox_inventory"
      docker_sandbox_group: docker_sandbox_containers_cleanup_by_inventory
      docker_sandbox_idempotence_test: false
      docker_sandbox_cleanup_by_ppid: false
      docker_sandbox_cleanup_by_user: false
      docker_sandbox_cleanup_by_playbook: false
      docker_sandbox_cleanup_by_inventory: true
  tasks:
    - name: Get partent process id
      command: "echo $PPID"
      changed_when: false
      register: get_ppid_result

    - name: Search running docker containers created by the test
      command: >-
        docker ps -a --format='{''{.Names}''}'
        --filter label=docker_sandbox_ppid={{ get_ppid_result.stdout }}
      changed_when: false
      register: search_test_containers_result

    - name: Verify only running docker containers are the last ones created
      assert:
       that: >-
        item in containers_inventory_2 | map(attribute='name') | list
      loop: "{{ search_test_containers_result.stdout_lines }}"

- name: Test explicit cleanup with absent state
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.docker_sandbox
      docker_provisioner_containers_provisioning_method: sequential
      docker_sandbox_images: "{{ images_inventory_2 }}"
      docker_sandbox_containers: "{{ containers_inventory_2 }}"
      docker_sandbox_state: absent
      docker_sandbox_group: docker_sandbox_containers_explicit_absent
      docker_sandbox_inventory: "./docker_sandbox_inventory"
  tasks:
    - name: Get partent process id
      command: "echo $PPID"
      changed_when: false
      register: get_ppid_result

    - name: Search running docker containers created by the test
      command: >-
        docker ps -a --format='{''{.Names}''}'
        --filter label=docker_sandbox_ppid={{ get_ppid_result.stdout }}
      changed_when: false
      register: search_test_containers_result

    - name: Verify there are not running test docker containers
      assert:
       that: search_test_containers_result.stdout_lines | length == 0

    - name: Search explicit inventory from previous test
      stat:
        path: "./docker_sandbox_inventory"
      register: check_explicit_inventory_result

    - name: Check explicit inventory from previous test does not exist
      assert:
        that:
          - not check_explicit_inventory_result.stat.exists

- name: Test enabling recreation after idempotence test
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.docker_sandbox
      docker_provisioner_containers_provisioning_method: sequential
      idempotence_tester_playbook: /tmp/idempotence.yml
      docker_sandbox_images: "{{ images_inventory_3 }}"
      docker_sandbox_containers: "{{ containers_inventory_3 }}"
      docker_sandbox_state: started
      docker_sandbox_group: docker_sandbox_containers
      docker_sandbox_idempotence_test: true
      docker_sandbox_idempotence_test_recreate_after: true
  tasks:
    - name: Assert that idempotence test was ok
      assert:
        that: not docker_sandbox_idempotence_result is failed

- name: Test that containers were recreated after running idempotence test
  hosts: vagrant_sandbox_vms
  tasks:
    - name: Check /tmp/testfile file in all docker containers
      shell: >-
        for c in `docker ps -q`;
        do docker exec $c test -f /tmp/testfile
        && echo EXISTS || echo MISSING ;
        done
      args:
        warn: no
      register: check_testfile_result
      changed_when: false
      failed_when: false

    - name: Check testfile file does not exist
      assert:
        that:
          - not check_testfile_result.stdout is search("EXISTS")
          - check_testfile_result.stdout is search("MISSING")

- name: Test disabling containers recreation after idempotence test
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.docker_sandbox
      docker_provisioner_containers_provisioning_method: sequential
      idempotence_tester_playbook: /tmp/idempotence.yml
      docker_sandbox_images: "{{ images_inventory_3 }}"
      docker_sandbox_containers: "{{ containers_inventory_3 }}"
      docker_sandbox_state: recreated
      docker_sandbox_group: docker_sandbox_containers
      docker_sandbox_idempotence_test: true
      docker_sandbox_idempotence_test_recreate_after: false

- name: Test that containers were not recreated after idempotence test
  hosts: vagrant_sandbox_vms
  tasks:
    - name: Check /tmp/testfile file in all docker containers
      shell: >-
        for c in `docker ps -q`;
        do docker exec $c test -f /tmp/testfile
        && echo EXISTS || echo MISSING ;
        done
      args:
        warn: no
      register: check_testfile_result
      changed_when: false
      failed_when: false

    - name: Check testfile file exists
      assert:
        that:
          - not check_testfile_result.stdout is search("MISSING")
          - check_testfile_result.stdout is search("EXISTS")

    - name: Emtpy sandbox images and containers facts to prepare next test
      set_fact:
        docker_sandbox_images: []
        docker_sandbox_containers: []

- name: Test cleanup by ppid
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.docker_sandbox
      docker_provisioner_containers_provisioning_method: sequential
      docker_sandbox_images: "{{ images_inventory_4 }}"
      docker_sandbox_containers: "{{ containers_inventory_4 }}"
      docker_sandbox_state: started
      docker_sandbox_group: docker_sandbox_containers_cleanup_by_ppid
      docker_sandbox_idempotence_test: false
      docker_sandbox_cleanup_by_ppid: true
      docker_sandbox_cleanup_by_user: false
      docker_sandbox_cleanup_by_playbook: false
  tasks:
    - name: Get partent process id
      command: "echo $PPID"
      changed_when: false
      register: get_ppid_result

    - name: Search running docker containers created by the test
      command: >-
        docker ps -a --format='{''{.Names}''}'
        --filter label=docker_sandbox_ppid={{ get_ppid_result.stdout }}
      changed_when: false
      register: search_test_containers_result

    - name: Verify only running docker containers are the last ones created
      assert:
        that: >-
          item in containers_inventory_4
                  | map(attribute='name')
                  | list
      loop: "{{ search_test_containers_result.stdout_lines }}"

- name: Test cleanup by user
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.docker_sandbox
      docker_provisioner_containers_provisioning_method: sequential
      docker_sandbox_images: "{{ images_inventory_5 }}"
      docker_sandbox_containers: "{{ containers_inventory_5 }}"
      docker_sandbox_state: started
      docker_sandbox_group: docker_sandbox_containers_cleanup_by_user
      docker_sandbox_idempotence_test: false
      docker_sandbox_cleanup_by_ppid: false
      docker_sandbox_cleanup_by_user: true
      docker_sandbox_cleanup_by_playbook: false
  tasks:
    - name: Get partent process id
      command: "echo $PPID"
      changed_when: false
      register: get_ppid_result

    - name: Search running docker containers created by the test
      command: >-
        docker ps -a --format='{''{.Names}''}'
        --filter label=docker_sandbox_ppid={{ get_ppid_result.stdout }}
      changed_when: false
      register: search_test_containers_result

    - name: Verify only running docker containers are the last ones created
      assert:
        that: >-
          item in containers_inventory_5
                  | map(attribute='name')
                  | list
      loop: "{{ search_test_containers_result.stdout_lines }}"

- name: Test cleanup by playbook
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.docker_sandbox
      docker_provisioner_containers_provisioning_method: sequential
      docker_sandbox_images: "{{ images_inventory_6 }}"
      docker_sandbox_containers: "{{ containers_inventory_6 }}"
      docker_sandbox_state: started
      docker_sandbox_group: docker_sandbox_containers
      docker_sandbox_idempotence_test: false
      docker_sandbox_cleanup_by_ppid: false
      docker_sandbox_cleanup_by_user: false
      docker_sandbox_cleanup_by_playbook: true
  tasks:
    - name: Get partent process id
      command: "echo $PPID"
      changed_when: false
      register: get_ppid_result

    - name: Search running docker containers created by the test
      command: >-
        docker ps -a --format='{''{.Names}''}'
        --filter label=docker_sandbox_ppid={{ get_ppid_result.stdout }}
      changed_when: false
      register: search_test_containers_result

    - name: Verify only running docker containers are the last ones created
      assert:
        that: >-
          item in containers_inventory_6
                  | map(attribute='name')
                  | list
      loop: "{{ search_test_containers_result.stdout_lines }}"

- name: Test docker sandbox cleanup
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.docker_sandbox
      docker_sandbox_images: >-
        {{ images_inventory_1
           | union(images_inventory_2)
           | union(images_inventory_3)
           | union(images_inventory_4)
           | union(images_inventory_5)
           | union(images_inventory_6) }}
      docker_sandbox_containers: >-
        {{ containers_inventory_1
           | union(containers_inventory_2)
           | union(containers_inventory_3)
           | union(containers_inventory_4)
           | union(containers_inventory_5)
           | union(containers_inventory_6) }}
      docker_sandbox_state: absent
  tasks:
    - name: Search running docker containers
      command: >-
        docker ps -a --format='{''{.Names}''}'
      changed_when: false
      register: search_test_containers_result

    - name: Verify there are not running test docker containers
      assert:
       that: >-
         item not in containers_inventory_1
                     | union(containers_inventory_2)
                     | union(containers_inventory_3)
                     | union(containers_inventory_4)
                     | union(containers_inventory_5)
                     | union(containers_inventory_6)
                     | map(attribute='name')
                     | list
      loop: "{{ search_test_containers_result.stdout_lines }}"

- name: Cleanup vagrant sandbox
  hosts: localhost
  roles:
    - role: amtega.vagrant_sandbox
      vagrant_sandbox_state: absent
  tags:
    - cleanup
    - sandbox
