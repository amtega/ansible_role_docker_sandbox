---
# Stalled containers managament tasks

- block:
    - name: get playbook file
      docker_sandbox_playbook:
      register: docker_sandbox_get_playbook_result

    - name: setup fact with full playbook path
      set_fact:
        docker_sandbox_playbook: >-
          {{ playbook_dir }}/{{ docker_sandbox_get_playbook_result.playbook }}

    - name: search previous dockers containers created by same parent ppid
      shell: >-
        docker ps -a --format='{''{.Names}''}'
        --filter
        label=docker_sandbox_ppid={{ docker_sandbox_get_ppid_result.stdout }}
      changed_when: false
      when: docker_sandbox_cleanup_by_ppid
      register: docker_sandbox_containers_by_ppid_result
      check_mode: no

    - name: search previous dockers containers created by same user
      shell: >-
        docker ps -a --format='{''{.Names}''}'
        --filter label=docker_sandbox_user={{ ansible_user_id }}
      changed_when: false
      when: docker_sandbox_cleanup_by_user
      register: docker_sandbox_containers_by_user_result
      check_mode: no

    - name: search previous dockers containers created by same playbook
      shell: >-
        docker ps -a --format='{''{.Names}''}'
        --filter label=docker_sandbox_playbook={{ docker_sandbox_playbook }}
      changed_when: false
      when: docker_sandbox_cleanup_by_playbook
      register: docker_sandbox_containers_by_playbook_result
      check_mode: no

    - name: search previous dockers containers created with same inventory
      shell: >-
        docker ps -a --format='{''{.Names}''}'
        --filter label=docker_sandbox_inventory={{ docker_sandbox_inventory }}
      changed_when: false
      when: docker_sandbox_cleanup_by_inventory
      register: docker_sandbox_containers_by_inventory_result
      check_mode: no

    - name: launch asynchronous cleanup of stalled docker containers
      docker_container:
        name: "{{ item }}"
        state: absent
        force_kill: true
      when: >-
        docker_sandbox_cleanup_by_ppid
        or docker_sandbox_cleanup_by_user
        or docker_sandbox_cleanup_by_playbook
        or docker_sandbox_cleanup_by_inventory
      register: docker_sandbox_stalled_async_result
      loop: >-
        {{ docker_sandbox_containers_by_ppid_result.stdout_lines | default([])
           | union(
               docker_sandbox_containers_by_user_result.stdout_lines
               | default([]))
           | union(
               docker_sandbox_containers_by_playbook_result.stdout_lines
               | default([]))
           | union(
               docker_sandbox_containers_by_inventory_result.stdout_lines
               | default([]))
           | difference(
               docker_sandbox_containers | map(attribute='name') | list)
           | unique }}
      async: "{{ docker_sandbox_cleanup_max_time }}"
      poll: 0
      changed_when: false

    - name: check asynchronous stalled docker containers cleanup
      async_status:
        jid: "{{ async_result_item.ansible_job_id }}"
      loop: "{{ docker_sandbox_stalled_async_result.results }}"
      register: docker_sandbox_stalled_async_poll_results
      loop_control:
        label: "{{ async_result_item.item }}"
        loop_var: async_result_item
      until: docker_sandbox_stalled_async_poll_results.finished
      retries: "{{ docker_sandbox_cleanup_max_time }}"
      delay: 1
  tags:
    - role::docker_sandbox
    - role::docker_sandbox::stalled
